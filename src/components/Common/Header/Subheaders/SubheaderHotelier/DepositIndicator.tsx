import { useClickOutside, useMedia, useStateToggle } from 'hooks/UI';
import { HeaderButton } from '../../Components/HeaderButton';
import scss from './DepositIndicator.module.scss';

type AccountDetailsProps = {
  hasDeposit: boolean;
  balance: { deposit: string; debt: string };
};

const AccountDetails = ({ hasDeposit, balance }: AccountDetailsProps) => {
  const { isDesktop } = useMedia();

  const topLabelClassName = `header-ScoreBox ${hasDeposit ? '' : 'dislike-h'}`;
  const topLabel = hasDeposit ? '–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω' : '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';

  const labelConditionsForAccountStop = hasDeposit
    ? '–ï—Å–ª–∏ –í–∞—à–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–µ–≤—ã—Å–∏—Ç 20 USD, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'
    : '–í–∞—à–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 20 USD. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.';

  const balanceAmountClassName = isDesktop ? 'price-ScoreBox' : scss.balanceAmountMobile;

  return (
    <>
      <p className={topLabelClassName}>{topLabel}</p>
      <p className="main-ScoreBox">–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.</p>
      <p className="main-ScoreBox">–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</p>
      <p className="main-ScoreBox">–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</p>

      <p className="text-ScoreBox">{labelConditionsForAccountStop}</p>

      <p className="value-ScoreBox dagger">
        –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å <span className={balanceAmountClassName}>{balance.debt} USD</span>
      </p>

      <p className="value-ScoreBox good">
        –î–µ–ø–æ–∑–∏—Ç <span className={balanceAmountClassName}>{balance.deposit} USD</span>
      </p>

      <div className="deposit-btn-style">
        <button className="deposit-btn">–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç</button>
      </div>
    </>
  );
};

const DepositStatus = ({
  hasDeposit,
  toggleHasDeposit,
  overlayClassName,
}: {
  hasDeposit: boolean;
  toggleHasDeposit: () => void;
  overlayClassName?: string;
}) => {
  const balance = { deposit: hasDeposit ? '33' : '0', debt: hasDeposit ? '0' : '33' };

  return (
    <div className={`${scss.depositStatus} ${overlayClassName}`}>
      <HeaderButton
        buttonClassName={scss.toggleHasDepositBtn}
        tooltipClassName={scss.tooltip}
        onClick={toggleHasDeposit}
        buttonTooltip={hasDeposit ? 'deposit' : 'debt'}
      >
        {hasDeposit ? 'üí∞' : 'üôÄ'}
      </HeaderButton>

      <AccountDetails balance={balance} hasDeposit={hasDeposit} />
    </div>
  );
};

export const DepositIndicator = ({
  buttonClassName,
  overlayClassName,
  tooltipClassName,
  depositIndicatorClassName,
}: {
  buttonClassName?: string;
  overlayClassName?: string;
  tooltipClassName?: string;
  depositIndicatorClassName?: string;
}) => {
  const [hasDeposit, , , toggleHasDeposit] = useStateToggle(true);
  const [showDetails, , hideDetails, toggleShowDetails] = useStateToggle();

  const containerRef = useClickOutside(hideDetails);

  const iconClassName = hasDeposit ? scss.thumbUp : scss.thumbDown;

  return (
    <div className={`${scss.depositIndicator} ${depositIndicatorClassName}`} ref={containerRef}>
      <HeaderButton
        iconId="thumb-up"
        buttonClassName={buttonClassName}
        tooltipClassName={tooltipClassName}
        iconClassName={iconClassName}
        buttonTooltip={``}
        onClick={toggleShowDetails}
      />

      {showDetails && (
        <DepositStatus
          overlayClassName={overlayClassName}
          hasDeposit={hasDeposit}
          toggleHasDeposit={toggleHasDeposit}
        />
      )}
    </div>
  );
};
